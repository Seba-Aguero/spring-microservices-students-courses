version: '3.8'

services:
  # Infrastructure Services
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER:-root}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-root}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka-server:
    build: ./microservice-eureka
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVER_URL}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./microservice-eureka/target
          target: /app

  # Config Server
  config-server:
    build: ./microservice-config
    container_name: config-server
    ports:
      - "8888:8888"
    volumes:
      - ./microservice-config/.env:/app/.env
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    develop:
      watch:
        - action: sync+restart
          path: ./microservice-config/target
          target: /app

  # Microservices
  student-service:
    build: ./microservice-student
    container_name: student-service
    ports:
      - "8090:8090"
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVER_URL}
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/${MYSQL_DATABASE}
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - SPRING_RABBITMQ_HOST=rabbitmq
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_URL}
    networks:
      - microservices-network
    depends_on:
      config-server:
        condition: service_healthy
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./microservice-student/target
          target: /app

  course-service:
    build: ./microservice-course
    container_name: course-service
    ports:
      - "9090:9090"
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVER_URL}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_RABBITMQ_HOST=rabbitmq
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_URL}
    networks:
      - microservices-network
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./microservice-course/target
          target: /app

  auth-service:
    build: ./microservice-auth
    container_name: auth-service
    ports:
      - "9091:9091"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVER_URL}
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/msvc-auth
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_URL}
    networks:
      - microservices-network
    depends_on:
      config-server:
        condition: service_healthy
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./microservice-auth/target
          target: /app

  # API Gateway
  gateway-service:
    build: ./microservice-gateway
    container_name: gateway-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVER_URL}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_URL}
    networks:
      - microservices-network
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./microservice-gateway/target
          target: /app

networks:
  microservices-network:
    driver: bridge

volumes:
  rabbitmq_data:
  mysql_data:
  postgres_data:













